#!/usr/bin/env bash
# Usage: gh render-markdown [options] <file1>[ <file2>...]
#        gh render-markdown [options] < file
#        echo '# markdown' | gh render-markdown [options]
#        gh render-markdown [options] <<< '# markdown'
#        gh render-markdown [options]
#        # markdown from sdtin
#        ^D
#
# NAME
#   gh render-markdown -- render markdown files as HTML page using GitHub
#
# SYNOPSIS
#   gh render-markdown [options] <file1>[ <file2>...]
#   gh render-markdown [options] < file
#   echo '# markdown' | gh render-markdown [options]
#   gh render-markdown [options] <<< '# markdown'
#   gh render-markdown [options]
#   # markdown from sdtin
#   ^D
#
# DESCRIPTION
#   Use GitHub's Markdown API to render a markdown document as an HTML page.
#
# OPTIONS
#   -c CONTEXT, --context CONTEXT
#     The repository context to use when creating references in gfm mode. For
#     example, setting context to octo-org/octo-repo will change the text #42
#     into an HTML link to issue 42 in the octo-org/octo-repo repository.
#
#   -m MODE, --mode MODE
#     The rendering mode. Can be either markdown or gfm. Default: markdown
#
#   --gfm
#     Use gfm mode (same as `--mode gfm`).
#
# SEE ALSO
#   https://docs.github.com/en/rest/reference/markdown

if [[ "$DEBUG" ]]; then
  export PS4='+ [${BASH_SOURCE##*/}:${LINENO}] '
  set -x
fi

set -euo pipefail

# Echoes given args to STDERR
#
# $@ - args to pass to echo
warn() {
  echo "$@" >&2
}

# Prints help text from the top of this file
#
# $1 - h to show one line usage, otherwise print full help
print_help() {
  sed -ne '/^#/!q;s/^#$/# /;/^# /s/^# //p' < "$0" |
    awk -v f="${1#-h}" '!f&&/^Usage:/||u{u=!/^\s*$/;if(!u)exit}u||f'
}

# Submits STDIN to GitHub's Markdown API.
#
# $1 - mode (gfm or markdown)
# $2 - context (gfm only)
render() {
  local mode="$1" context="$2" text

  text="$(cat)"

  exec gh api \
    -X POST \
    -f text="$text" \
    -f mode="$mode" \
    -f context="$context" \
    markdown
}

# Main program
main() {
  local mode=markdown context=""

  while [[ "$#" -gt 0 ]]; do
    case "$1" in
      -m | --mode)
        mode="$2"
        shift 2
        ;;
      -c | --context)
        context="$2"
        shift 2
        ;;
      --gfm)
        mode=gfm
        shift
        ;;
      -h | --help)
        print_help "$1"
        return 0
        ;;
      --)
        shift
        break
        ;;
      -*)
        warn "invalid option \`$1'"
        return 1
        ;;
      *)
        break
        ;;
    esac
  done

  cat "$@" | render "$mode" "$context"
}

# Away we go!
main "$@"
